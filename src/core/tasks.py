# src/core/tasks.py

import asyncio
from src.core.celery_app import celery_app
from src.core.llm_integration import analyze_content_with_llm
from src.db import crud_operations
from src.db.database import get_db_session_sync # Importar uma fun√ß√£o para obter sess√£o SQLAlchemy s√≠ncrona
from datetime import datetime
from typing import List, Optional

# NOTA: O Celery worker roda em um processo separado e n√£o pode usar depend√™ncias ass√≠ncronas do FastAPI (Depends).
# Precisamos de uma maneira de obter uma sess√£o de BD s√≠ncrona dentro da tarefa Celery.

# --- Fun√ß√£o Auxiliar para Mapear Classifica√ß√£o para Cor (Copiada de routes_analyze.py) ---
def get_color_from_classification(classification: str) -> str:
    """
    Mapeia a classifica√ß√£o do LLM para um emoji de cor.
    """
    lower_classification = classification.lower()
    if "fake_news" in lower_classification or "noticia_falsa" in lower_classification or "desinformacao" in lower_classification:
        return "üî¥" # Vermelho para fake news
    elif "verdadeiro" in lower_classification or "fato" in lower_classification or "confirmado" in lower_classification:
        return "üü¢" # Verde para verdadeiro
    elif "s√°tira" in lower_classification or "humor" in lower_classification or "ficcao" in lower_classification:
        return "‚ö™" # Branco/Cinzento para s√°tira
    elif "opini√£o" in lower_classification or "editorial" in lower_classification or "perspectiva" in lower_classification:
        return "üîµ" # Azul para opini√£o
    elif "parcial" in lower_classification or "tendencioso" in lower_classification:
        return "üü†" # Laranja para parcial
    else:
        return "‚ö´" # Preto para indefinido/erro

# --- Tarefa Celery para An√°lise ---
@celery_app.task(bind=True) # `bind=True` permite acessar `self` (a inst√¢ncia da tarefa)
def analyze_content_task(self, analysis_id: str, content: str, preferred_llm: str):
    # A tarefa Celery √© s√≠ncrona por padr√£o.
    # Se analyze_content_with_llm for ass√≠ncrona, precisamos execut√°-la dentro de um loop de eventos asyncio.
    loop = asyncio.get_event_loop()
    if loop.is_running(): # Se j√° h√° um loop rodando (ex: em ambientes de teste), crie uma nova tarefa
        task = loop.create_task(_run_analysis_logic(analysis_id, content, preferred_llm))
        loop.run_until_complete(task)
    else: # Caso contr√°rio, crie um novo loop (comum em workers Celery)
        loop.run_until_complete(_run_analysis_logic(analysis_id, content, preferred_llm))

async def _run_analysis_logic(analysis_id: str, content: str, preferred_llm: str):
    """
    L√≥gica de an√°lise real que ser√° executada pela tarefa Celery.
    Isolada para poder ser chamada de forma ass√≠ncrona.
    """
    # A tarefa Celery n√£o tem acesso direto √†s depend√™ncias do FastAPI (como get_db)
    # Precisamos obter uma sess√£o de BD s√≠ncrona aqui.
    db = None
    try:
        # Pega uma sess√£o do banco de dados s√≠ncrona.
        # Precisamos de um get_db_session_sync em src/db/database.py
        db = next(get_db_session_sync()) # Obt√©m a sess√£o do gerador

        print(f"INFO: [Celery Task] Iniciando an√°lise para ID: {analysis_id} com {preferred_llm}.")
        llm_result = {}
        try:
            llm_result = await analyze_content_with_llm(content, preferred_llm=preferred_llm)
            print(f"DEBUG: [Celery Task] Resultado do LLM para ID {analysis_id}: {llm_result}")
        except Exception as e:
            print(f"ERRO: [Celery Task] Falha ao chamar LLM para ID {analysis_id}: {e}")
            llm_result = {"classification": "error", "message": f"Erro na an√°lise da LLM: {e}"}

        classification = llm_result.get("classification", "indefinido")
        message = llm_result.get("message", "Nenhuma justificativa fornecida pela LLM ou erro na an√°lise.")
        sources = llm_result.get("sources", ["LLM_analysis"])

        # Atualizar a an√°lise no banco de dados
        updated_analysis = crud_operations.update_analysis_details(
            db=db,
            analysis_id=analysis_id,
            classification=classification,
            status="completed" if classification != "error" else "failed",
            sources=sources,
            message=message
        )
        if not updated_analysis:
            print(f"ERRO: [Celery Task] An√°lise com ID {analysis_id} n√£o encontrada para atualiza√ß√£o.")

        print(f"INFO: [Celery Task] An√°lise para ID: {analysis_id} conclu√≠da e BD atualizado.")

    except Exception as e:
        print(f"ERRO: [Celery Task] Falha cr√≠tica na an√°lise de fundo para ID {analysis_id}: {e}")
        # Tentar atualizar o status para 'failed' mesmo em caso de erro cr√≠tico
        if db:
            try:
                crud_operations.update_analysis_status(
                    db=db,
                    analysis_id=analysis_id,
                    status="failed",
                    message=f"Erro cr√≠tico na an√°lise: {e}"
                )
            except Exception as update_e:
                print(f"ERRO: [Celery Task] Falha ao atualizar status para 'failed' para ID {analysis_id}: {update_e}")
    finally:
        if db:
            db.close() # Fechar a sess√£o do banco de dados no final da tarefa